// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/steelbeam.proto

package steelbeam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SteelBeamService_GetBeams_FullMethodName       = "/steelbeam.SteelBeamService/GetBeams"
	SteelBeamService_GetBeam_FullMethodName        = "/steelbeam.SteelBeamService/GetBeam"
	SteelBeamService_CreateBeam_FullMethodName     = "/steelbeam.SteelBeamService/CreateBeam"
	SteelBeamService_GetStockStatus_FullMethodName = "/steelbeam.SteelBeamService/GetStockStatus"
)

// SteelBeamServiceClient is the client API for SteelBeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SteelBeam service definition
type SteelBeamServiceClient interface {
	// Get all steel beams
	GetBeams(ctx context.Context, in *GetBeamsRequest, opts ...grpc.CallOption) (*GetBeamsResponse, error)
	// Get a specific steel beam by section designation
	GetBeam(ctx context.Context, in *GetBeamRequest, opts ...grpc.CallOption) (*GetBeamResponse, error)
	// Create a new steel beam
	CreateBeam(ctx context.Context, in *CreateBeamRequest, opts ...grpc.CallOption) (*CreateBeamResponse, error)
	// Get stock status for a product
	GetStockStatus(ctx context.Context, in *GetStockStatusRequest, opts ...grpc.CallOption) (*GetStockStatusResponse, error)
}

type steelBeamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSteelBeamServiceClient(cc grpc.ClientConnInterface) SteelBeamServiceClient {
	return &steelBeamServiceClient{cc}
}

func (c *steelBeamServiceClient) GetBeams(ctx context.Context, in *GetBeamsRequest, opts ...grpc.CallOption) (*GetBeamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeamsResponse)
	err := c.cc.Invoke(ctx, SteelBeamService_GetBeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steelBeamServiceClient) GetBeam(ctx context.Context, in *GetBeamRequest, opts ...grpc.CallOption) (*GetBeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeamResponse)
	err := c.cc.Invoke(ctx, SteelBeamService_GetBeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steelBeamServiceClient) CreateBeam(ctx context.Context, in *CreateBeamRequest, opts ...grpc.CallOption) (*CreateBeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBeamResponse)
	err := c.cc.Invoke(ctx, SteelBeamService_CreateBeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steelBeamServiceClient) GetStockStatus(ctx context.Context, in *GetStockStatusRequest, opts ...grpc.CallOption) (*GetStockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockStatusResponse)
	err := c.cc.Invoke(ctx, SteelBeamService_GetStockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteelBeamServiceServer is the server API for SteelBeamService service.
// All implementations must embed UnimplementedSteelBeamServiceServer
// for forward compatibility.
//
// SteelBeam service definition
type SteelBeamServiceServer interface {
	// Get all steel beams
	GetBeams(context.Context, *GetBeamsRequest) (*GetBeamsResponse, error)
	// Get a specific steel beam by section designation
	GetBeam(context.Context, *GetBeamRequest) (*GetBeamResponse, error)
	// Create a new steel beam
	CreateBeam(context.Context, *CreateBeamRequest) (*CreateBeamResponse, error)
	// Get stock status for a product
	GetStockStatus(context.Context, *GetStockStatusRequest) (*GetStockStatusResponse, error)
	mustEmbedUnimplementedSteelBeamServiceServer()
}

// UnimplementedSteelBeamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSteelBeamServiceServer struct{}

func (UnimplementedSteelBeamServiceServer) GetBeams(context.Context, *GetBeamsRequest) (*GetBeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeams not implemented")
}
func (UnimplementedSteelBeamServiceServer) GetBeam(context.Context, *GetBeamRequest) (*GetBeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeam not implemented")
}
func (UnimplementedSteelBeamServiceServer) CreateBeam(context.Context, *CreateBeamRequest) (*CreateBeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeam not implemented")
}
func (UnimplementedSteelBeamServiceServer) GetStockStatus(context.Context, *GetStockStatusRequest) (*GetStockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockStatus not implemented")
}
func (UnimplementedSteelBeamServiceServer) mustEmbedUnimplementedSteelBeamServiceServer() {}
func (UnimplementedSteelBeamServiceServer) testEmbeddedByValue()                          {}

// UnsafeSteelBeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteelBeamServiceServer will
// result in compilation errors.
type UnsafeSteelBeamServiceServer interface {
	mustEmbedUnimplementedSteelBeamServiceServer()
}

func RegisterSteelBeamServiceServer(s grpc.ServiceRegistrar, srv SteelBeamServiceServer) {
	// If the following call pancis, it indicates UnimplementedSteelBeamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SteelBeamService_ServiceDesc, srv)
}

func _SteelBeamService_GetBeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteelBeamServiceServer).GetBeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteelBeamService_GetBeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteelBeamServiceServer).GetBeams(ctx, req.(*GetBeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteelBeamService_GetBeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteelBeamServiceServer).GetBeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteelBeamService_GetBeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteelBeamServiceServer).GetBeam(ctx, req.(*GetBeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteelBeamService_CreateBeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteelBeamServiceServer).CreateBeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteelBeamService_CreateBeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteelBeamServiceServer).CreateBeam(ctx, req.(*CreateBeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteelBeamService_GetStockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteelBeamServiceServer).GetStockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteelBeamService_GetStockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteelBeamServiceServer).GetStockStatus(ctx, req.(*GetStockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SteelBeamService_ServiceDesc is the grpc.ServiceDesc for SteelBeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteelBeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "steelbeam.SteelBeamService",
	HandlerType: (*SteelBeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeams",
			Handler:    _SteelBeamService_GetBeams_Handler,
		},
		{
			MethodName: "GetBeam",
			Handler:    _SteelBeamService_GetBeam_Handler,
		},
		{
			MethodName: "CreateBeam",
			Handler:    _SteelBeamService_CreateBeam_Handler,
		},
		{
			MethodName: "GetStockStatus",
			Handler:    _SteelBeamService_GetStockStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/steelbeam.proto",
}
